inp = """[[[5,[4,8]],0],[[[2,2],5],[7,9]]]
[[[[4,2],0],[4,[9,9]]],[[[7,0],[9,8]],5]]
[[[[3,2],2],4],0]
[[8,7],[[9,4],[8,[5,5]]]]
[[[1,7],[[8,2],[3,5]]],[6,8]]
[[[[7,1],[4,2]],[[6,0],[3,8]]],[[[5,2],8],[7,[4,7]]]]
[[6,[5,8]],[[4,[3,0]],5]]
[[[[1,2],[1,5]],[[7,1],6]],[2,[4,7]]]
[[9,[[5,3],3]],9]
[6,[[[6,1],2],[6,[5,6]]]]
[[[9,8],[[5,6],7]],[[4,[9,9]],[8,1]]]
[[4,7],[[[3,1],[1,5]],[5,8]]]
[[[9,7],[5,[6,0]]],[[9,[3,5]],7]]
[[[[1,2],[1,4]],4],0]
[[[[0,0],[1,2]],[[0,2],[1,6]]],[0,[[6,2],[5,1]]]]
[[[1,2],[[0,2],4]],[[5,[7,3]],2]]
[[5,[1,[6,3]]],[5,[2,[5,3]]]]
[[[9,[7,7]],7],[[8,1],[[9,1],7]]]
[[[[6,5],6],[6,5]],[7,[9,[3,9]]]]
[[6,[9,3]],6]
[[5,[[2,3],[9,1]]],[0,[[5,8],4]]]
[[[[4,9],[2,3]],7],6]
[[[2,6],6],[[[9,0],9],[4,[6,1]]]]
[[[9,[9,1]],[4,4]],[0,[6,8]]]
[8,[2,[[0,4],[5,4]]]]
[[3,[9,4]],[[0,[6,9]],2]]
[[[1,1],[[0,1],[1,9]]],[[5,4],[6,9]]]
[4,[2,[[6,9],0]]]
[[[6,[3,7]],[3,7]],[1,[2,[4,7]]]]
[[[[6,4],[0,0]],[[8,2],5]],[[8,[2,4]],[4,[9,1]]]]
[[[[8,1],[8,0]],[5,[7,6]]],[2,[[0,2],[9,2]]]]
[[6,7],[[9,[1,1]],[[9,2],9]]]
[[[[7,2],[8,8]],0],4]
[[[2,1],[[3,1],9]],9]
[[[[5,5],9],[[7,8],[6,0]]],[[[4,0],[0,6]],[6,2]]]
[[6,[3,[9,4]]],[[[5,5],5],2]]
[[[4,3],[9,[8,4]]],4]
[[[0,[5,9]],[[9,6],8]],[7,[3,[8,9]]]]
[[6,[[8,2],[0,2]]],[[8,8],[[7,9],2]]]
[[[0,[8,0]],7],[[[7,2],[6,6]],[[5,5],5]]]
[5,[[1,[3,6]],[[0,7],6]]]
[0,[[[5,7],[6,2]],8]]
[[[4,[5,4]],[[2,9],[5,3]]],[7,[2,4]]]
[[6,[[8,4],6]],9]
[[[7,[7,7]],[2,9]],[8,[5,[6,4]]]]
[[[[7,9],[9,9]],[[6,1],[5,5]]],[[[4,3],[7,3]],[6,[0,3]]]]
[[2,[2,0]],6]
[[[[2,3],2],1],[0,2]]
[[[[8,6],[5,6]],3],1]
[[[[4,9],[2,4]],2],[2,[[6,3],[3,4]]]]
[0,[[[1,0],[4,0]],8]]
[[4,[6,[2,1]]],[[[5,8],4],[[8,0],4]]]
[[[0,0],[[3,4],1]],[9,[1,[7,0]]]]
[[0,0],[[[9,3],8],[[1,7],[4,6]]]]
[[[4,3],3],[[[3,3],9],9]]
[[[[2,0],[0,1]],[[1,2],[1,0]]],[[[6,6],1],[7,1]]]
[[1,[[2,7],9]],[[[9,1],6],[[7,0],0]]]
[[7,[[5,4],0]],8]
[[6,9],[[[8,1],6],[5,[1,2]]]]
[[7,6],[[[1,9],2],[0,3]]]
[[[9,7],[9,[5,2]]],[[[0,0],2],[0,8]]]
[[9,[6,2]],[5,8]]
[[[6,[0,3]],[[5,1],[4,4]]],[6,[5,[1,9]]]]
[[8,8],[[[3,1],7],[[8,3],3]]]
[[[[1,1],[9,5]],9],[[[2,8],[6,4]],[[1,2],[4,5]]]]
[[[1,7],8],[[5,[0,6]],[9,[3,3]]]]
[[7,3],[[[8,2],3],4]]
[[9,3],[[1,[7,0]],5]]
[[[9,[2,2]],[7,5]],[[7,[1,7]],[[0,5],7]]]
[[1,[[0,3],3]],1]
[[9,[[3,0],[9,0]]],1]
[[2,[[3,9],7]],[[[8,1],[7,2]],[9,[6,3]]]]
[4,[[0,[0,4]],[0,1]]]
[[[[2,8],6],[[6,6],[5,8]]],[[1,[7,5]],[[2,2],[6,0]]]]
[[[6,7],8],[[[1,5],[9,3]],[0,2]]]
[[[[6,6],[6,2]],[0,6]],[[[1,5],2],[[0,3],[3,9]]]]
[[5,[8,2]],[3,8]]
[[8,7],[[0,5],[3,[6,8]]]]
[[6,[[2,3],5]],[[9,[0,8]],[[2,4],[1,8]]]]
[[[[5,7],[4,3]],[[5,4],5]],[0,[[6,5],2]]]
[2,[[5,[0,7]],[3,[4,0]]]]
[1,9]
[[[[1,4],1],[0,[1,2]]],2]
[[4,3],[5,[6,4]]]
[[[4,4],[[8,0],[6,5]]],[[4,[9,1]],[[1,1],[2,2]]]]
[[4,3],[[[1,1],1],[[4,6],[5,7]]]]
[[[[6,1],[5,3]],2],[[[0,6],[7,3]],8]]
[[[2,8],5],[1,[3,[8,7]]]]
[[7,[5,[9,0]]],[[[9,1],2],[2,[9,6]]]]
[[[[7,3],1],[[4,6],[5,1]]],[[[4,7],4],[[5,2],[3,7]]]]
[[[[2,3],8],[7,8]],[[[5,5],[2,5]],[[6,8],1]]]
[[[2,1],[[8,9],[4,3]]],[[8,[9,0]],7]]
[[[[8,2],5],0],[[8,[9,6]],[[6,1],1]]]
[[[3,[4,9]],[[5,4],[2,2]]],4]
[[[[9,8],4],[[7,4],9]],[[0,7],6]]
[[7,[[6,1],8]],[[2,0],[2,5]]]
[[[[3,2],6],5],6]
[6,[3,5]]
[[[[7,1],7],4],[[[4,6],5],[1,[7,9]]]]
[[[[7,0],7],[8,9]],[5,[[2,5],6]]]"""

import ast

def add(a, b):
    return [a, b]

def magnitude(n):
    if isinstance(n, int):
        return n
    else:
        return 3*magnitude(n[0]) + 2*magnitude(n[1])

def explode(n):
    ll = [char for char in str(n)]
    l = [ll[0]]
    for char in ll[1:]:
        if char == " ":
            continue
        elif l[-1].isnumeric() and char.isnumeric():
            l[-1] += char
        else:
            l.append(char)
    l = [char for char in l if char != ","]
    l = [int(char) if char.isnumeric() else char for char in l]
    d = 0
    for i, v in enumerate(l):
        if v == "[":
            d += 1
        elif v == "]":
            d -= 1
        else:
            if d >= 5:
                break
            else:
                continue
    left, right = l[i], l[i+1]
    for j in range(i-1, -1, -1):
        if isinstance(l[j], int):
            l[j] += left
            break
    for j in range(i+2, len(l)):
        if isinstance(l[j], int):
            l[j] += right
            break
    l[i-1] = 0
    del l[i]
    del l[i]
    del l[i]
    ll = []
    for i in range(len(l)-1):
        ll.append(l[i])
        if (isinstance(l[i], int) or l[i] == "]") and (isinstance(l[i+1], int) or l[i+1] == "["):
            ll.append(",")
    ll.append(l[-1])
    return ast.literal_eval("".join([str(a) for a in ll]))

def needexplode(n, d = 0, needed = 4):
    if isinstance(n[0], int) and isinstance(n[1], int):
        return d >= needed
    elif isinstance(n[0], int):
        return needexplode(n[1], d+1, needed)
    elif isinstance(n[1], int):
        return needexplode(n[0], d+1, needed)
    else:
        return needexplode(n[0], d+1, needed) or needexplode(n[1], d+1, needed)

def split(n, needed = 10):
    if isinstance(n, int):
        if n >= needed:
            if n % 2 == 0:
                return [n//2, n//2], True
            else:
                return [n//2, n//2 + 1], True
        else:
            return n, False
    else:
        a, af = split(n[0], needed)
        if af:
            return [a, n[1]], True
        else:
            b, bf = split(n[1], needed)
            if bf:
                return[n[0], b], True
            else:
                return[n[0], n[1]], False

def needsplit(n, needed = 10):
    if isinstance(n, int):
        return n >= needed
    else:
        return needsplit(n[0], needed) or needsplit(n[1], needed)

def red(a):
    flag = True
    while flag:
        flag = False
        if needexplode(a):
            a = explode(a)
            flag = True
        elif needsplit(a):
            a, _ = split(a)
            flag = True
    return a

# inp = """[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
# [[[5,[2,8]],4],[5,[[9,9],0]]]
# [6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
# [[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
# [[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
# [[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
# [[[[5,4],[7,7]],8],[[8,3],8]]
# [[9,3],[[9,9],[6,[4,9]]]]
# [[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
# [[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]"""

inp = inp.split("\n")
inp = [ast.literal_eval(a) for a in inp]

# part 1
# c = inp[0]
# for line in inp[1:]:
#     c = add(c, line)
#     c = red(c)
# print(magnitude(c))

# part 2
m = 0
for i in range(len(inp)):
    for j in range(i+1, len(inp)):
        a, b = inp[i], inp[j]
        m = max(m, magnitude(red(add(a, b))))
        m = max(m, magnitude(red(add(b, a))))
print(m)