# operator_dict = {"^": 3,
#                  "*": 2,
#                  "/": 2,
#                  "+": 1,
#                  "-": 1,
#                  }
operator_dict = {"*": 1,
                 "+": 2,
                 }

parenthesis_dict = {
                "(":1,
                ")":0
}

operator_assoc = {"*": 0, # left
                  "+": 0,
                  "(": 0,
                  ")": 0,
                  }

# if it is an operand we push it to the output queu
def operand_check(element):
    if (element not in operator_dict.keys()) and (element not in parenthesis_dict.keys()):
        output_queu.append(element)

def parenthesis_check(element):
    # push down the left parenthesis
    if element == "(":
        stack.append(element)
    # if it's right parenthesis then pop everything out of stack until
    # you reach left parenthesis
    elif element == ")":
        while stack[-1] != "(":
            temp = stack.pop()
            output_queu.append(temp)
        # to remove left parenthesis
        stack.pop()

def operator_check(element):
    if element in operator_dict.keys():
        while (len(stack) != 0) and assoc_precedence_check(element) and does_top_of_stack_have_operator():
            temp = stack.pop()
            output_queu.append(temp)
        stack.append(element)

def assoc_precedence_check(element):
    if stack[-1] == "(" or ((operator_assoc[element] == 0) and (operator_dict[element] <= operator_dict[stack[-1]])): return True
    elif stack[-1] == "(" or ((operator_assoc[element]==1) and (operator_dict[element] < operator_dict[stack[-1]])): return True
    else: return False


def does_top_of_stack_have_operator():
    return True if stack[-1] in operator_dict.keys() else False

def empty_stack():
    while len(stack) != 0 :
        temp = stack.pop()
        output_queu.append(temp)

inp = """8 + (9 + 7 * 4 * 9) + 4 * 8 * (6 * 6 * 9 * 8 * 3 * 7) + 2
7 * 5 * (8 + (2 * 6 + 5 + 2 * 6) * 3 * 3) + 2 * 8 + (2 + 5 * 8 * 7 + 6 + 8)
4 * (4 * (4 + 8 + 9 * 7) + 5 + 9 * 6 * (4 + 4 + 8 + 7 * 9 + 3)) * 3 + (6 + 5 * 9 * 5 * (4 * 4 + 5 + 3)) + (6 * 9 * 5 * 3 * 7 + 2) * (9 * 4 * (2 * 8))
(3 * 2 + 7) + 3 + 6 + 5 * 2 + 2
9 + (3 * 5 * 2 * 3) + 5 + ((7 + 6) + 4 * (5 * 8 + 9 + 9 * 4 + 5) + 8) + 9
5 + 5 * 9 * 4 + ((5 * 8 + 7) * 2)
9 + 5 + 7 * ((6 + 3 * 8 * 3 + 3) * 2 + 5 + 8 * (3 * 2 * 9 * 3)) * 4 + 8
8 * (5 * (7 * 7) + 2 * 6 * 9)
(3 + 8 + 9 * 5 * 8) * (8 * (7 * 4 * 7 + 2 + 3 * 6) + 2) + 8 * (8 + 9 + 5 * 4 + (2 + 7 * 3))
((7 + 9) * 4 * 4 + (2 * 5 + 8 * 8) * 7 * 5) * 2 * 9 * 4 * (3 * 5 * 7 * 7 + 2 + 6) + 2
((9 * 9 * 4 + 8 + 7 + 9) + 8) + 2 * 3 + 7 + 2
(2 * 6 * 2) * 5 + (2 * 7 * 6) * (4 * 8 * 7 + 9 + 6) * 4 * 7
(4 * (5 + 9 + 8) + 7) * 6
2 * 3 + (4 + 3 + 3 * 7 * 2 + (3 * 2))
(9 * 4) + 3 * 8 * 4 + 2
9 * 7 + 2
((6 * 4 + 7 * 8) * 6 * (2 * 9 + 5) + 3 + (5 * 6 + 5 + 9)) + 7
3 * 5 + 3 + (3 * 9 + 5) + 7 + 7
2 * (4 + 2 * 2 + (9 + 3) * (6 * 7) + 3) * 8 * (3 * 2 + 2 * (5 + 3 * 3) * 3) + 4
((6 * 2 * 4 + 3 + 6 + 7) * 9 * (8 + 8 * 8) * (3 * 2) + (7 * 3)) * (8 * 2 * 7 + (8 + 2 + 6 + 3 + 9 + 8)) + 9 * 6
5 + (5 + 6 + 7 * 6 + 6 * 9)
9 + ((5 * 3 + 9 * 9) + 4 + 7) * (5 * 4 + 5) * 6 * (7 * (7 * 3) * 2) + 5
8 + 6 * 6 + 8 + 5 + 2
(5 * 4 + 6) * (7 + 7 * 5 * 5 + 8 * 2)
(6 * 3 + 4 * 6 * 2 * 6) + 3 * 5 + 2 * ((3 * 2 + 6) + (4 + 9 + 7) + (9 + 6 * 6 + 7) * (4 * 3 + 7 + 2 + 8 + 8) * 7) * 7
(9 * 8 + 9 + (6 * 4 * 8) * 7 + 6) * 6 + 6 * 7
(5 + 7 * 5 + 3) * ((7 * 4 * 7 + 8 * 2 + 7) * (6 * 8 + 7 * 8) + 9 * 2) + 8
(2 + 8 + 3 + 2) * (9 + (3 * 9) + (4 * 9 + 3 * 8 * 8 + 8) + 7) + 8 * 2
8 + (9 * 3 + 8 * 3 * 3) * (7 + 4 + 5 * 6 + 2 + 9) + 7 + (9 + 8 + 4 + 8 + 7) + 4
(3 * (2 * 4 * 7 * 4) * 7 * 2 * (4 + 8 * 2 + 7 + 5 * 4) * 4) * 2
2 + (6 + 8 * 7) + (3 + 6 + 3 * 3 + 8 + 4) + 9
(4 * (8 * 3 + 3 + 7 + 9) * (8 + 5 * 2 + 6 + 2) * 8) + 8 * 6 * 4 + ((3 * 5 * 7 * 3 + 2 * 2) + (6 * 8 + 5 * 9 + 7) * 8)
(3 * 8 * 3 + 4) + (9 + 2 + 7 * 2 * 2) * 8
(9 + 3 + (3 + 7 + 3 + 8 + 3 + 6) + (7 + 2 + 4 + 4 * 5 * 2) + 6 + 6) * 2
(5 * 7) + ((3 + 5) * 4 * (3 + 8 * 9)) * ((6 * 5 * 9 * 3 * 4 * 6) * 4 * 7 * (5 * 3 + 8) + 7) + 7
(3 + 5 * (6 * 7 + 8)) * (9 + 6) + 5 * ((7 + 4 + 7) + 4 * 3)
9 + 4 + (5 * 4 + 3 * 8 * 8) * 9
2 + 3 * (8 + 7 * 3 + (4 + 6 * 4 * 2) + 5 + 4) + (3 + 2)
7 * 7 * 5 * (7 + 3 * 3 * 4 * 4 + 2) * 8
6 * 6 + ((8 * 6 * 2 * 9 + 7 + 8) + 8 * 8 * 3 + 6) * (2 + 8 + 8 + 8 * 2)
8 * 9 + (7 * 7 + 8 + 3 * 8) * 7 * 5 * 4
3 + 6 + 6 + 7 + 9 * 9
(6 * (6 * 6) + 2 + 7 * 7) + 6 * 7 * 4 * 3 * (8 + (6 * 6 + 4))
((6 * 6) + 6 + 8 * 8 * 2) + (9 + 3 + (2 * 5 * 4 * 8 * 8 * 8) + (6 * 8) * 7 * 7)
(8 + (7 * 8 + 4 * 3 + 4 + 3) * 5 + (5 * 5 * 5 + 7 * 6 + 7) * (8 + 6 * 9 + 7 + 9)) * ((7 + 7 + 8 + 3) + 7 * 2 * 5) * 9 + 7
5 + ((4 * 4 + 9 * 4 + 3) + (7 * 7) * 8 * 7) * 2 * 6 + (7 * 5 + 6 * 9 + (3 * 5 + 9))
6 * 5
8 + (9 + 6 * 4 * 4 * (2 * 2 * 8 * 7) + 3) * 2 + 9 * 9
(9 + 5 * 5 * 7) * 9 * 2 + ((8 * 2 * 4) * 8)
2 + (9 + 8 * 4 * (5 + 5 + 4) + 9 + 5) * 3
8 * 9 * 6 + (2 + 3 + 7 + 4 + 8) + 9
6 * 8 + 5 + (3 * 8 * 4 + 5 + 5) + 4 + 7
7 + 8 * 3 + 4 * 3 + (5 * (2 * 2 * 3 * 5 * 7 + 5))
6 + 9 + 7 * 2 + 6 * 4
7 + (9 * (2 + 5 * 6) + 3 + 3 * 9 * 9) + 6 + (4 * 7 * 2 + 9 + (4 + 4))
(4 + (3 * 9 * 3 * 2 + 3)) * 2 * 8
3 + (8 + 8)
3 * 6 * 8 * 9 + (7 + 2 * 4 * 6 + 3) * (7 * 2)
(7 + 5 + 6 * 9) * 4 * 8
2 + 4 * 2 + 7 * 4 * (9 + 9 * 7 * 4 + (9 + 9) * 4)
5 + 5 + (5 * 4 * 7 * 8)
6 * 7 * (8 * 4) + 9 + 3 + 6
(7 * 6 + 8 * (7 * 5 * 6 + 2 * 2) + 2) * (9 * 2 * 6 * 9 + 9 * 9) * 3
((2 + 9 + 5 + 4 * 5 + 4) * 8 + 2 * 3 * (6 * 8 + 3 * 8 + 5 * 9) + (2 + 8)) + 3
(4 * 4 * 9) * 5 + (5 * (5 * 8 * 2 * 5) * 8) * 8
(4 + 9 * 3 + 4) + 8 + 6 + 5
3 * 3 + (7 * 5 + 8 + 9 * 7)
9 + 9 * (8 + 7 + 8 * 7 * 2 + 7) + 4 + 6
4 + 4 + ((2 + 2 + 9 + 6 * 7) + 6 + 9) + 8 * 2
(4 * 3) + 7 + (3 + 8) * 3
9 * (4 * (4 * 7)) + 6
3 + 4 * 2 * (2 + (4 + 8) * 5 * 2) * 9
6 + 9 * ((4 * 4 * 5 * 6 * 2 + 6) * 5 * 7 * (9 + 3 + 9 * 4) + 5 * 2) * (3 + 3 * 4 * (5 + 5) + (7 + 2 * 5 * 9) + 6) + 9
(9 + 7 * 8 + 3 * (3 * 3 * 2 + 4)) * 2
7 + 4 * (8 * 5) + 3 + 9
6 * (3 * 6 + 2) * 8
2 * 8 + 9 + (5 + 4 * 2) * 7
8 + 9 * 3 + (4 * 7 * 8 * (6 + 4 * 5 * 7 + 5) * (4 + 4)) + 6 * (7 * 5 + 4)
4 + 3 + (9 * (6 * 7 + 8 + 4) + (6 + 9) + 3 + (3 * 7 + 9)) * 3 + 7
2 * (5 + 3 * 4 * 4) * 6 + 2 * 5
6 * 4 * (5 + (5 * 3 * 9 * 9 + 3) * 9 * 6 + (3 + 8 + 9)) + 6 + 6 * 7
(6 + 3 * 3 * (4 * 4 * 5 * 7 + 9 + 6) + 2) * (3 + (8 + 2 * 7 + 5)) + 4
(9 + 5 + 5 * 3 + 7) + 4 * 9 + 8 + 2
6 + 5 * (6 * 6 * 8)
3 + 2 * 9
8 * 6 * (5 + 8 * (7 + 3 + 3 * 3 * 8) * 8)
(3 + (3 + 2 * 6 + 6 + 3 + 9) + 6 * 5) * 4 * ((2 * 5 + 9) * 5 * 9) + 9 * 3
9 + 3 * (8 + 9 * 2 * (3 + 7) + 5 * 9) * 3
6 * 2 * 3 * (2 + 8 * (4 + 6) + 9 * (9 * 8 * 9 * 6 + 9) * (9 * 8 * 2 * 7 * 5 + 8)) + 4
7 * 7 + (5 + 3 + 7 * (2 + 4) * 7 + (8 * 7))
(3 + 8) + (2 + 5 * 2 + 7) * 7
(2 + 3 * 5 + 5 * 2) * ((4 * 2 * 4 + 2) + (4 * 7 + 8) * 9) + 3
(3 * 2 * 5 * 5) * (7 + 2 * (7 + 5 * 2 * 3 * 4)) + (8 + 7 + 8 * (4 + 7 * 8 * 5)) * 6 + 5 * 8
4 + 8 + 5 * ((9 * 5 * 7 + 4) * (5 * 3 + 9 * 2 * 6 + 7) + 7 * (4 + 8 * 2 * 5 + 6) + (4 + 9 + 2 * 8)) + 6
2 * 5 * 5 * 9 * 2
3 * (2 * 8 * 4 + 9) + (6 + 2 * 9) * 2
7 + 7 + 8 * (2 + 9 * (5 + 2)) + 7
(7 + (7 + 3 * 9 + 5 + 8) * 5) + ((4 * 5 + 2) * 9 + (9 + 2 + 8 * 2) * 8 * 9 * 7) * (8 + 9 + 5 + (5 * 9 * 7 + 9)) + (4 + (8 + 4) * (7 * 8 + 6 + 6) + (8 + 9 + 4 + 3 + 4 + 6) + (7 + 9 + 6 * 8 + 2) * 9)
(6 + 7 + 8 * 9 * 3) + 2 + 2 * 5
((9 * 5 * 9 + 9) + (9 + 9 * 9 * 9 * 7 * 9)) * 3
6 + ((4 * 3 * 3 * 5) * 3) * 5 + 8
9 + 2 * 4 * (4 + 3 + 7 + (4 * 3 + 5 + 6) * (7 * 9 * 8 * 4 + 5 * 2) + 4) * 5
5 * ((4 + 7 + 3 + 3 * 5) * 8 + 2 + 7 * 4 + 6) + 9 * 6
4 + 6 + 3 * 6 * (4 + 9 + 3 + 4 * 7)
6 * (2 * 3 * 4 + (2 * 9) + 6 * (8 * 4 + 3)) * 7 * 3 + 7 + (6 + 9 * 3 * 7 * 9 * 9)
3 + 5 * 7 + 4 + 6 + (3 * 4 + (2 * 2 * 5 + 6 + 2 * 2))
4 + (2 * 5) * 2 + 5 * (6 * 8 + 7 + 5 + 9 * 9)
6 + 2 * (4 * (4 * 8 * 9 * 6 * 3) * 9 + 4 + 2) * 4
5 * 6 + ((4 * 8) * 9 + 4 * (4 * 2 + 3 * 8 * 9 + 7) * 4 + (5 * 2)) * 4 + 5
4 * ((4 * 3) + 4 + 4 * 7)
((9 * 7) * (7 + 4 + 6) + 9 * 3 + 9) + 9 * 6
8 * 2 + 9 + 5 * (7 * 5 + 3 * 3)
2 + 8 * 7 + ((3 * 6) + 3 * 5 + 7 * 7) * (7 + 8 + (7 + 2) + 4 * 6) + 3
8 + (8 + 7 * 5 * 4)
4 + (8 + 2 + 4) + 4 + ((4 + 3 + 7 * 5 + 3) * 2 + 5 * 8 + 5) + 6 * 8
(5 + 6) + 2 + 2 * 8 * 2 + 6
(8 * 8 * 2 + 7 + 6) + (4 + 2 * 7 + 9 + 2 * (3 + 4 * 9 * 7 * 5)) + 2 * 6 * 4
7 * 3 * 9 + (5 + 6 * 7 * (7 + 9 * 7 + 6 * 2 * 9) + 3) * 4
(6 + (8 * 7 * 9) * 8 + (3 * 2) * 3) * 7 * 4 + 3 + 5 * (7 + 9 * 8 + (3 + 7 + 2 + 3) + 7)
5 * (9 + 9) + (3 * 7 + 6 + 7 * 6 + 9) + 4 + 8 + 6
(5 * 5 * 8 * 8 * 9 * (8 + 4 * 8 + 8)) + 6
6 * 3 + 9 + (3 * 3 + (9 + 2 + 6) * 7 * 3) + 2
(5 + (6 * 7 + 5)) + (3 * 3 + 4 * (3 * 9 * 6 + 4 + 5 + 9) + 4 * 8)
5 + 2 + 4 * (8 + 8 * 9 + 5 + 8 + 4)
2 * 7 + (7 + 3 + 9 * 9 * (8 + 9 + 4 + 8) + 9) * 8 * 9 * 8
8 + (5 + 3 + (6 * 4 * 2 + 7 * 3 * 2))
5 * 2 + 7 + 5
3 + (3 * 6 + 5 * 9 * 3 + 8) * 7 + 9 * 3 * (4 * 7 + 3)
((9 * 5 + 3 * 5) + 8 * 7 * 8) * (8 + 5 + 7 + 7) * 9 + 9 + 8 * 6
3 * (9 + 5 * 4 * 6 + 3 + (6 + 7))
(6 + 7 + (2 + 2 * 5 * 9 * 7) + (8 + 9)) * 3 * 5
(2 * 4) * 8 + 2 * (6 + 8 + 5 + 2 * 8) + 4
5 * (9 * (8 * 6 * 7) + 8 + 6 + 7 * 9) + 7 + 4 * 6 * (5 + 4 + 4)
(2 * 7 * 6 * 9 + 2 + 2) * (4 + 6 + 4 + 7 + 3 + 4) + 7 * 7 + (2 + 8) * 9
3 * ((8 * 5) * (2 * 5 + 6) * (4 + 9 * 9) + 3) * (3 * 6 + 4 + 6 * 2) + 7 * (6 * 7 + 9 * 6)
5 + 5 + (6 * 8 + 3 + 5) * 8 + 8
4 * 6
2 + 5 + (9 * 2 + 9 + 7 * 5 + 2) * 5 * 7 + 3
4 * ((9 + 7 + 9 * 2) * 6 + 6 + 2 * 3 * 4) * 7 * 2
9 + ((6 + 6) + 6 + 6 * 7 + 3)
7 * 5 * 5 * 4 + (9 * 8 * (2 + 2) * 4 + 2)
6 + 7
4 * 7 + 7 * 2 + (2 + 6 * 7)
8 * 7 * (5 * 2 * 5 * 2 + (4 + 7)) + (5 * (2 + 6) * 7 * 2 + 3)
9 + 2 * (3 * 7 + 8) * 2
(3 + (2 * 4)) * (6 * 9 + 2 * 6 + 4 + (5 + 9 + 8)) + 7
4 + 8 * 2 + 6 * 7
7 + 7 * 8 * 5 * ((2 + 6 + 3 + 9 + 8 * 5) * 2 + 5)
4 * 9 + (4 + (8 * 4 * 2 + 6 + 4 * 9) * 6 * 8 + 9 * 2) * (6 * 3 + 7) + (6 + 3 * 4 + 3 + 5 + (3 + 7 * 3 + 2)) + 3
(6 + 5) + 4 + (9 + 4 + 4 + (7 * 9 + 8 * 6 + 9 + 2))
(8 + 6) + (4 * 6 * 4 + 8) * 6 + (8 + 4 * 4)
5 * 6 * 4 * 2 * 9
6 * 8 + (9 + 5 * 6 * 7 * 7 * 7) * ((4 + 8 + 2) * 8 + 2)
6 * 7 * 9 * (6 * 6 * 5) + ((3 + 7 * 3 + 6 * 7) + 6 + 4 + 3 + 9) + 7
5 * 9 + 7 * 7 + (4 * 5 * (7 * 9) * 8) + 4
7 * (8 * 2 + 4 + (4 + 9 * 2 + 3 * 3 * 9)) * (5 * 5 * 6 + (8 * 5 + 8 + 6 + 8 + 6) + 9)
3 + 2 * 8 * ((2 * 6 + 9) + 3 * 6)
3 * (4 * 6) + 4 * 6 * 3
6 + 5 + 3 + 3 * (6 * 4 + 4 + (5 + 6 * 5 + 6) * 6) + (7 * 9 + (5 * 4 + 5 * 8) * (9 * 2) * 5 + (3 + 7 * 8 + 7))
((9 + 7 * 6) * 4 + 6 + 3 * 6 + 5) + (6 + 6 + (6 + 8) + (8 * 3 * 8 + 2 + 5 * 6)) * 2
4 * (9 * 7 + 8) * 8 + 8
(5 + 8 * 3 + (5 * 6 + 4 + 9 * 8)) + 8 + 9 * (5 + 8)
3 * (9 + 3) * 6 * (5 * 4 + 7) * 9
2 * 2 * 6 * (6 * 9)
((2 * 7 * 3 * 8) * 7 + 8) * 6 + 4
(4 + 3 * (8 * 7 * 3 * 2) * 5) * 3 * 5 * 3 * (6 * 2 + (3 + 8 * 7 * 6))
(2 + 3 + 2) * (4 * 7 * 2 * 9)
2 + 6 * 6 + 4 + 8 + (2 * 3)
9 * 2 + 8 + 7 * ((6 + 7) + 9 + 3)
(6 + 7 + 8 + 9 + 7 + 9) * 2 * (6 * 8) + 3 + 7 * 3
2 * 8 * (9 * 8 * 8 * 4 * 2) * 7 * (2 + 6 * 3) + 7
(2 + 8 * 7 + 2) + 5 + 9 + (5 + 3 + 2)
(9 * (7 + 8 * 7 + 4 * 8 + 3) * 8 * 2 * 8) * 2 * 4
9 + 7 * 6 * (9 + 6 * 4 * 6 + 7) * (7 + 2 + (3 + 5 + 9 + 6) * 4 + 4 * 5) + 5
(6 + 8 + (6 + 3 + 6 * 4 * 5 + 9) * 3 + 8 + 8) + 6 * 6 * 2
(5 + 5 + 4 * 5) + (3 * (8 + 7 + 6 + 7) + (9 + 5 + 2 * 4 * 9)) * 8 + 8 + 4 * 9
3 + (8 + 3 + 5 * 5 + 5 + 6) * 2 + 5
(8 * 5 * 3 + 8 * 6 + 8) + 9 + 2
8 + (8 + 4 + 2 * 2) * 4 + (5 * 8) + (7 + 3 * 2 * 4 + 2 * 2) * 2
(2 + 9 * 3) + 9 + 5 * (6 + 4)
2 * (4 + 7 * 8 + 8 + 6) * 9 + 2 + 3
8 * (9 + 8) * 8 + ((4 + 2) * (2 + 2 * 3)) * 7 * (4 * (5 + 8 * 2))
3 * 8 * (8 + 4 * 9 * 7) * (6 + 9 + 5 + (4 * 3 + 3) * 7)
(6 + (5 * 3) * 3 + (5 + 8)) + (7 + (3 + 5 + 9 + 6 + 2) * 5 * (8 + 4 * 6) * (9 + 4 + 3) * 7) + 7 * 7 + 8
(5 * 4 + (8 + 2 * 6 * 3) * 8 + 9 + (5 + 3 * 8 + 9 * 6)) * 3 + ((9 * 9 * 5 + 6 * 6 * 2) + 6 * 6 * (3 + 5 + 3))
6 * 3 * 5 * 6 + 4 * (8 * 7 * 5 + 2 * 2)
(6 * 7 + 7 * 4 + 8) + ((3 + 3 + 5 * 9 * 6) * 2 * (2 * 3)) * 7 + 2 * (3 + 9 * 4)
6 * 2 + (5 + 2 * 7 * 6) * 2 + 5 * 6
5 + 3 * 5 + ((4 * 4 * 2) * (7 * 2 * 8 + 5) + 9 + 7 * 4 + 3) + 5 * (6 * 7 * 7 * (5 * 7))
7 + (2 * 5 * (7 + 9 + 3 * 6 * 8) + (6 + 6)) * 3 * 8 + (6 * 6 * 5 + 5 + 4)
5 * 3 + 6 + 2 * (7 + 9 + 5 * (4 + 7 + 8 * 2) * 6)
5 + 6 + ((4 + 7 + 3) * 8 * (2 * 4))
7 * 7 + 5 * 8 * ((5 * 7 * 3 * 6 * 7) * 8) + (6 * 9)
8 + 3 + (4 + 9 + 5 * 9 + 9) + (6 + (2 * 3 * 8)) * 5 + 2
9 * 3 + ((6 * 4 + 2) + (7 + 8) + 9 * 7 + 3 + 3) * 5 * 2
(9 + 6 + 8 + 3 * 9) * 6
((6 + 6 * 7 + 2 * 6 + 6) + (7 + 5) + 9) * 7
(9 * 5 * 5 * 8 + 8) * 4 + 3 + (8 * 8) + (7 * 8 * 7 + 8 + (7 + 5 * 4 + 9 + 8))
(6 + 4 * 2 * 7 + 5) + 2 + 3 + 4 * 4 * 5
9 + ((4 + 3 * 4 + 4) * (8 * 3 * 8 * 3 + 7 * 9) + 9)
8 * (8 * 5 + 9 + 8 * 3) * (4 + 5 * 3 * (9 * 5 + 2 * 4 + 9) + 4) + 2 + 9 * 9
8 * 8 * ((3 + 3 * 3 + 3 * 9) + 2 + 4 + 2 * 6) * 4
8 * 7 * 2 * (2 * 9 + 3) * (9 * (8 + 9 + 7 * 2 * 4 + 5) * (3 + 9 * 8))
8 + 5 * (9 + 7 * (5 * 5 + 9 + 5 + 9 + 3)) * 4 * 6 + (8 * 3 * 4 * 4 * 7 + (7 * 5 * 7 * 7 * 8))
2 * 3 + 5 + 7 + 8 * 5
9 * ((9 * 7) + 3 * 9 * 8 * 6) + 5
2 + 5 + 9 * 3 + ((3 + 3) * 8 + 3 * (3 + 3 + 9 * 6 + 2))
(6 + 5 * 4 * 4 + 5 + 3) * 3 + 8 * 9 + 6
(8 * 3 * 7 + 3) * 9 + 9 * ((6 + 2 + 7) * 6 * 7 + (5 + 6)) * (8 + 6)
3 + (2 + (3 * 8 * 2 * 8 + 6 * 2) + 6 + 3 + 9) + 6 * 3
5 * (6 + 6) * 3 + 3 + 8 * (6 + 8 + 6)
4 + 8 * (6 * (9 + 4 + 9 + 6) * (9 * 2 + 9) * (9 * 3))
5 * 5 * 8 * (8 + 3 * (3 * 4) + 6 + 3 * 4)
9 + 8 + 6 * 9
(9 + 6 * 5 + 9 + (4 + 4 + 5 + 3 + 4)) + 6 * 8 * 5 * (7 + 4 * 9 * 6 * 5)
(3 * 9 * 2) + 3 * ((9 + 9 * 8) * 9 + (7 + 8 * 8 * 3) + 2 * 4) * 3 + 6 * 5
6 + 8 + (8 + 3 * 4 * 2 * 8 * 8) + 3
3 * ((5 + 5 * 8) * 4) + (3 * 3 + 5 * 3 * 6) * 5
5 * 7 + ((8 + 4 * 9) + 4) + 8 * 7
((3 + 8 + 6 + 7) + (9 * 9 * 9 + 2) + 8) + 6
((9 * 4 * 4 + 6) * 2 * 4 + 8) + 8 * ((3 * 3 * 7) * (4 * 5 * 9 + 3) * (6 * 8 * 9 + 8 + 4)) + 8 + 5
(6 + 8 * 7) * 3 + 3
2 + 7
7 + 4 + 3 * 9
(9 * (6 * 6 * 2) + 5 + 3) + (7 * 5 * 3 + 9 + 7 + 8) + (8 * 2 + (2 * 4 * 9 + 8 * 8 * 6) + 6 * 8 * 5)
(6 * 9 * 7 + 5) + 7 * 3 * 2 * 5
4 + (7 * 8 + 5 * 6 + 5)
((8 + 9 + 7 + 3) * 9) * 8 + 3 * 4 * 3 + 9
5 * 2 * (6 * (8 + 3 * 7 * 9 * 6) + (7 + 9 * 9 * 5 * 4) * (7 * 2)) * 6 * 4 * 2
6 + 8 + 9 + (4 + (8 + 4 * 6 * 9 + 3)) * 8 * 8
(7 + 5 + 6 * 7 * 7) + 4 * (6 * 5 + 2) * 5 + 7 + (7 * (8 + 6) + 3 * 7)
3 * (3 * 9 * 3 * 3 + 8 * 7) * 5
6 * 5 * (6 * 2 * 2) + 4 + 3 + (3 + 5 + (5 + 8 + 5) + 2 * 4)
2 * (3 + 2 + (5 + 8 + 7 + 2) + 6) + 7 + 3 + 3 + 2
((2 * 7 + 5 * 2 * 5 * 4) + 4 + 5 * (5 + 8 * 5)) + 3
8 + (5 * 8 + 7) * 7 * 5 * ((5 + 4 + 9) + 7 * 8 + (6 * 8 + 4 * 2 * 2)) * 4
(3 + 9 + 5 + (6 * 4 * 5 * 2 * 2)) + 5 * (9 * (7 + 7) + 4 * 5) * (2 + 6 + 5 + (2 * 4) * 7) + (4 + 6 + 7 * (3 + 5 + 8)) + (2 * 2)
2 + (3 * 9 * 6 + 2 + 3 + 9) + 3 * (8 + 5)
(2 + (8 * 3 + 6) + 8 * 2 * 7 * 2) + 9 * 6 + 5
3 * 8 + 5 * 2 + 8 + 8
8 * 6 * 5 * 4
((3 + 8 + 7) * 8) + 7 * (6 * (5 + 4 * 2 + 2) + (8 * 2 * 2) * 2 + 8) + 2 * 5
(9 * 2) * 2 * (4 * 4) * 6 + (5 * 4 * 6)
7 * (6 + (3 * 9 + 3 + 6 + 6 * 9) * 7 + (7 * 7 * 4) * (3 * 3 + 4 * 8) + 4)
(7 + 2 * 3 + 5 * 2 * 6) + 6 * (4 + 8 * 6)
(7 + 9 + 3 * 3) * 7 * 3 + (4 * 7 + (5 + 6 + 4 * 9) + 7 + 6)
(6 + 5 + (9 + 8 + 7 + 5) + 2 * 9) + 9 * 9 + 8
9 + 9 + 5
2 * ((3 * 9 * 2 + 2) + 3 * (2 * 5 * 7 * 4)) + (7 + (8 + 4 + 7) + 7 + 2)
7 + 8 * ((4 * 6) * 7 + 4)
(9 * 6 + (4 + 6 * 3) * 4) * 2 * 6
8 * (8 * 6 * 6 + 4 + 5) * 4
3 * 9 + (3 + (4 * 6 * 6) * 9 + (2 * 8 + 9) + 3)
8 + 3 + 5 + (2 + 4 + 3 * 5 * 5)
((4 * 4 + 4 * 8 * 7) + 4 + 2 * 7 * 2 * 7) + (3 + 6 * (4 * 9 + 2 * 9) + 9) + 2 * 6
6 * (4 + 3) * 5 + 6 + (9 * (2 * 2 * 8 * 6 + 2 + 6))
(7 + (8 + 6 * 3) + 3 + 2) + ((4 * 3) + 9 + (4 * 5 + 6 + 4 + 7 * 5) * 2 * 5 + 9) * 5
8 * 6 + 8 + (2 * (4 + 3) + 8 + 5)
6 + ((4 * 7 * 6) * 6 * 7 * 3 * 9 * 6) + 3
((8 * 6 + 2 * 9) * (9 * 8 * 4) + 8 + 2 + 8) * 4
6 * (9 * (4 * 8 + 2 + 2 * 7 * 7) * 6 * 7 + 8 * 4) * 2
((5 * 8 * 8 + 3 + 5 + 4) + 8) + 3 * ((2 + 9) + 2 * 4 + 7 + 3 + 7) + 7
8 * ((9 + 5 + 2 * 8 + 7) + (9 * 4 * 6) + (5 * 9 * 6 + 5 * 3) + (2 * 6 * 7) + 9)
7 * ((6 + 9 + 3 * 3 + 4) * 7 * 5) + 4
3 + (9 + 6 + 4 * 6 + 5 * 7) * (9 + 6 + 7)
6 * ((9 + 6 * 2 * 2 * 3 * 4) + 5 * (4 + 4 + 9 * 9 + 3) + 7) + 7
(3 + 7 * 4) * (9 + 7 * 3 * 5 * 4 * 4) * 6
(7 + 6 * (5 + 6 + 5)) * 9 * 8
((5 * 8 + 6 * 6 * 2) * 9 * (3 + 2 + 4 + 3 * 6) * 2) * 7 + 8 * 4 * ((3 * 3) + 3)
4 * 5 * 2 + 8 * (6 + 5 + 3 * (7 * 2 * 7) + 2)
(4 + 2 * 3 * (5 + 2 * 6)) + 3
7 + ((9 + 7 * 6 + 5 * 9 * 5) * 2 * 4) * (6 * (2 * 9 * 3) + 7 + 7 * (9 + 8 * 4 * 5 + 6)) + 8
4 + 7 * (4 * (2 + 9 * 4 + 3 * 7 + 8) + 2 + 6) * 9 * 3
4 + 3 + ((5 * 3 * 9 + 8 * 5 * 5) + 3 + 7 + 9 + 4) + 5
2 * 4 + 6 + 5 + (6 + 3 + (8 * 4 * 7) * 4) + 5
4 + (6 * 4 + 9) + 6 * 3 + 6
2 + 5 + 4 * 9 * 3 * ((7 + 4) * 7 + 2)
3 + 8 + 5 * ((8 + 4 * 7) + 6 * 8 * 4 * 2 * 7) * 2 + 3
(8 + 4) + 4 + 9 + 8
(7 * 3 * 3 * (9 + 3 * 4 * 5) * 2 * (7 + 4 * 4 * 5 + 8)) * 7 * 4 + 9 + 2 * 9
3 * 9 * 2 * 9 * (6 + (7 + 2 * 3) * (9 + 7) * 5 + 8) * (6 + 5)
9 * 9 * 7 * 4
(2 + 3 + 2 + 6 + 2) + 8 + 3
7 * 6 + 6 * (8 + (9 + 3 + 8 * 7 * 2) * (5 + 2 + 6 * 6 * 8) + 2 * 9)
(5 * 2 * (9 * 3 * 3 * 4 + 8 * 9) + 5 + 3) + (8 + 6 * 8) * 5 * 5
4 + (8 + (2 * 2 + 2) * 4) + 9 * 6 + (4 + 5 + (2 + 9)) + 8
4 + 7 + 7 + (3 + (5 * 8 * 6 * 9) * 4 * 3) + 3
9 * (7 + 5) + ((9 + 2 + 7 * 8) + 2 + 5) + (4 * 3 * (8 * 5)) + 7 * 3
(2 + 4 * 9 + 4) * 5
(5 + 4 * (8 * 9 + 4 * 2) * 4 + (7 + 3 + 5 * 5)) + 5 + (4 + 4 * 5 * 9) * (6 * 7 * 7 + 2) + 9
8 + 8 + 4 + 5 + 5 * (6 * 9 * 3 * 2 * 5 + 3)
(7 * 2 * 3 * 2 + 3 + (8 * 9 * 7 + 5)) + 6 * 8
(6 + 5 + 7 + 8 + 8 * 2) + 9 * 6 + 9
(6 * 8) + 9 + (7 + 3 + 6 * 6 + 6) + 6
9 * 7 + 6 * 2 + (7 + 9)
(9 + (8 + 9 * 2) + 4 + 3) + 7 + 6 + 3 * (2 + 2 + 5 * (7 + 9 * 9)) + 2
2 + 7 + 8 + 4 * 3
8 + ((7 + 3) * (4 + 2 * 9) + (8 * 2 + 7 + 9 * 9 + 9) * 8 + 6)
2 + (7 * 9 + 6) + 8 * 3 * ((2 + 3 + 4) * (5 * 6 * 8)) + 2
7 + 8 * 2 + (4 * 4 * 2 * 6) + 5
(4 * 7 * 6) + 6
7 + 4 + 3 * ((2 + 2 * 4 * 4) + 8) + 6
((4 * 4 + 5 * 7) * 8 + 7 + (9 + 4 + 7 * 9) + 7 * 8) + 6 * 6 + 6 + 5 * 5
4 * ((2 * 5 + 7 * 8) + 2) + 5
7 + 3 * (8 + 5 + 9) + 4 + 2 * 3
3 * (9 + 3 + (8 * 6) * 9 + (3 * 2)) + (9 * 2 + 4) + 2 + ((9 + 3 + 6) + 2)
3 + 3 + 3 + (8 * 3 + (3 * 7 * 7 + 7 * 6) + 2 * 6 * 7) * 9
2 * 6 * 3 + (4 * 7 + 5 * (7 + 7 * 5 * 2) * 6 + 5) + 9 * 9
2 * (6 + (9 * 4)) + (2 + (3 + 3)) * 6 * 2
4 * (4 * (7 + 5 + 9 * 3 + 3 * 9))
(2 + (5 * 7 + 4)) + 9 * 5 + (8 + 9 * 3 * 6 * 5 * 2) * 6 * 6
(6 * 2) + (3 * (6 * 8 * 4 * 6) + 4 * 7 + 4) + 9 + 9 + 5
2 + ((6 * 6 + 6 * 8) + 2 + 4 + 9 * 6) + 6
7 + (2 * 6 + 2 * 2) * 6 * 2 + 5 + 2
(6 * 8 + 4 + 9 + (4 * 6)) + 7 * 2 * 4 + 2
3 + 4 * (8 * 2 + 2 + 2 + 2 * 6) * 8 + 3 + (8 + 6 + 8 * 7 + 9)
8 + (2 * 5 + (6 + 6) + 8 * (3 + 9)) + 7 * (6 * 2 + 9) + 8
2 + 8 * (2 + 2 + 2 + 7 + (6 + 6 + 5) * 6) * 7
(4 + 4) * 9
(8 * (6 + 8 + 3 + 6 * 4 + 6) * 5 + 2 + 7 * 9) * 4
(9 * 8 * 7) * 5 * (3 * 7 + 3 + 5)
(9 * 9 * 9 * 5 * 3 * 7) + (8 * 6) * (9 * (3 * 6) + 3 * 9) + 3
6 * 4 + 8 * ((3 * 8 + 3 + 9) * 5 + 9 + (4 + 2 * 9 * 7) * 2)
8 + 6 + (3 * 2 + 3 + (6 * 9 * 2) * 6 + 9) + 4 + 8
3 + 6 + 6 * (9 + (6 * 2 * 8) + 4) * 3 * 4
(9 * 7) + 2 * 3
3 * 2 + (7 + (7 * 8 * 6 * 5 * 4 + 2) + 9 * 5 * 7) * 6 * 7
4 * (8 + 9 + 4 * 6 * 4) * 4 + 6
(7 * 2 * 4 * 4 + 8) + (8 * 3 * 9 + 4 * 5) * 2
6 + ((2 + 5 + 3 * 7 * 2) * 4 + 3) * 8 + 4 * 8
5 * 3 + 9
8 + 7
3 * (8 * 3 * 9) * 9 + 4 * 9 * (3 * 5)
6 + 6 * 9 + 5 + (2 * 7 * 5 * 4) * 3
2 * 3 * 4 + 7 + (7 + 2 * 3) * 7
2 + 4 * 7 * (2 * 2 + 6 * 7 * 3 + 7) * (8 + 8)
4 + (6 * 9 * (2 + 2 + 4) * 7 + 7) * 8
4 * (3 * 2 * 9)
8 + 8 * (2 + (2 + 6 * 5 * 3 + 8 * 2) * 7 * 8 + (8 + 8 * 3 + 9 + 8 + 9))
(9 * 4 * (2 + 4 * 4 + 9 + 4 * 3) + 2) + ((4 * 8) * (5 + 9 * 8 + 2) + (7 * 7 + 2 + 7)) + 4 + 6
8 + (8 * 8) * 5
9 * (6 + 4 + 3 * 6) * 3
4 + (4 * (3 * 9 + 9 + 3 + 7) * 6 * 7 * 7 + 2) * 7 + 8
8 + 6 + (6 + (2 * 9) * (3 + 9) * 7)
3 * 6 * 2 * 4 * 2
((6 + 6 + 5 * 7 + 9) * 9 * 2 * (7 * 5 + 8 * 9) + 8 * 4) * 6 * 3 + (2 * 8)
(8 + 9 + 7) * (5 * 3 + (9 + 4 + 4 * 7 + 6) * (6 * 7 * 3 * 4 * 5) + (7 * 4 + 4 * 6 + 4)) + 8
(6 * 4) + 2 * 9 + 2 + ((4 + 7 + 3 + 9 + 5 * 8) * (2 + 2) + (4 * 9 * 5 + 3) * 3) + 4
7 * 4 * ((8 + 8 + 8 * 9) + 8)
(2 * 9 * (9 * 3 + 5 * 8 + 4 + 5)) + 3 + 9 * 2 * 8 * ((4 + 6 * 3 + 2 * 2 + 3) * 6 + 8 + 5 + 2 + 9)
((7 + 6 + 4 + 3) + (8 + 9) * (8 * 8 + 8 * 4 + 4 * 5) + 9) * 9
8 + (9 * 9) * 2 * 8
2 * 9 + (7 * 7 + 7 + (2 + 4 + 2 * 7) * 6) + 3 * 5 * 7
((7 * 3 + 2 + 2) + 5 * 9 + 6 + 2) + ((6 * 6 + 7 + 3) + 6 * 5 + 7 * 8) + (7 * 3 + (2 + 4 * 3 * 4 * 2 * 5)) + 7 * 3 + 6
5 * 7 + (3 * 8 * 5 * 8 * 8 + 8) * 8 + ((8 + 2 * 6 + 6 * 8 + 7) + 9 * 3)
9 + 4 + 3 * (8 + (3 + 4) * 9 + 2 * (2 + 9 + 6))
(7 * 2 * 8 + 4 * 8) + 6 + 9 + (4 + 4 + 8 * (7 + 6 * 5 + 4 + 5 * 5) + 6 * (4 * 9 * 9)) * 4
3 * 6 + 7 * 7 + 3 + (8 * (9 + 6 + 3 + 2 * 9 * 9) * 3 + 4)
9 * (4 + (6 * 9 + 6 * 8) + 9) * 6 * 3 + 6
7 + 9 * (7 * 7 + 9 * 9) * 3
(3 * 4) + (2 + 3 + 5 + 7) * 6 + 3 * 6
8 + (8 * (9 + 9 + 8 * 4 + 4 + 2) * 4 * 9)
(7 + 9 * 3 + 6 * 6) * 2 + 9 + 5 + (6 + 3 * 2) + 8
2 + ((6 + 4 + 2 + 2 + 2) + 2 + 3 + 7 * 3) + ((7 + 7 * 8 * 8) * (9 + 2 * 8) * 5 * 6) * (7 * 7 * 5 + 9)
(5 * 9 + (9 + 5)) * ((2 * 7 * 2 + 4 * 5 * 5) * 6 + 8) + 8 * 9
4 * ((5 + 6 + 7 * 9 * 4 + 2) * 6 + 5 * (5 * 2 * 7 * 6 * 9) + 5)
6 * 6 + ((5 * 4 + 8 * 7 * 6 * 6) * 9 + 4) + 3 + 2 * 7
((4 * 6 + 5) * 9 * 7 + 5) * 9
((8 * 8 * 6 + 4 + 4 * 7) * (5 + 6) + (8 * 6 * 3 * 4 * 5)) * 6
2 * 2 * 6 * 8 + 4 * (7 * 5 * (8 + 3 * 6 * 4 + 7 * 5) + (5 * 8 * 8))
9 + ((5 * 7 + 6) + 6 + (4 + 4 + 8 + 7) + 2) + 8 * 2
3 * (8 + 2 * 9) * (4 * 4 + 8 + 6) + (5 + 5 * 7 + 6) + 8 * 4
(9 + 2 * 7) * 6 * (4 + 4)
4 + ((8 * 5 * 8 * 8) * (9 * 4 + 7 * 6) * 9) + 8
3 * (8 + 3 + (3 * 2 + 2 + 3 * 3)) * (5 + 6) + 4 + 9
7 * (6 * (8 + 6 * 3) + 5)
2 * 7 * 4
6 * 5 + ((3 * 6 + 5 + 3) * 8 + 3 * 2) + (8 + 6 * 3 * (6 + 9 * 6 * 7 * 6) + 3 + 2) * 2 * 4"""

su = 0

for expression in inp.split("\n"):
    stack = []
    output_queu = []
    for element in expression:
        if element == " ":
            continue
        operand_check(element)
        parenthesis_check(element)
        operator_check(element)

        # print("stack:",stack)
        # print("output queu",output_queu)
    empty_stack()
    print("stack:",stack)
    print("output queu",output_queu)
    # output_queu = ['2', '4', '+', '9', '*', '6', '9', '+', '8', '*', '6', '+', '*', '6', '+', '2', '+', '4', '+', '2', '*']
    rpnstack = []
    for d in output_queu:
        if d.isnumeric():
            rpnstack.append(int(d))
        else:
            v1 = rpnstack.pop()
            v2 = rpnstack.pop()
            rpnstack.append(eval(f"{v1}{d}{v2}"))
        print(rpnstack)
    print(rpnstack[0])
    su += rpnstack[0]
print()
# part 1
# print(su) # output: 202553439706
# part 2
print(su) # output: 88534268715686