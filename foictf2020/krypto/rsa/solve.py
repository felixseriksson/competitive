import math
import codecs
# some different variations on euclid's algorithm
def gcd(a,b):
    '''not at all optimized but returns the greatest common divisor of two integers a and b'''
    if b < 0:
        b *= -1
    if a < 0:
        a *= -1
    if b > a:
        a, b = int(b), int(a)
    while b != 0:
        t = int(b)
        b = int(int(a) % int(b))
        a = int(t)
    return int(a)

def extended_gcd(aa, bb):
    lastremainder, remainder = abs(aa), abs(bb)
    x, lastx, y, lasty = 0, 1, 1, 0
    while remainder:
        lastremainder, (quotient, remainder) = remainder, divmod(lastremainder, remainder)
        x, lastx = lastx - quotient*x, x
        y, lasty = lasty - quotient*y, y
    return lastremainder, lastx * (-1 if aa < 0 else 1), lasty * (-1 if bb < 0 else 1)

def modinv(a, m):
	g, x, y = extended_gcd(a, m)
	if g != 1:
		raise ValueError
	return x % m

n1 = 12127222083487393711784863551446153087774950169822499490032868876330582969702234341282845330544846241412406802079008091412558256097537107031475628065855069894284699932565280429047013056603793418506347698549317127537539167692147263780799671788173790735555157280584202053887294133553446979979815706858527507495910963103767517506450925708289752676134844479984815370442720262494827755173137498939888224607840448373218324136769561497491399228867375136489626332925660495482984966966844258221976876130230252868666647977716052922886547405959926748930612098988486158172642160665476027653931948145311780830282625337044578157549
n2 = 15870898007115808013449787864057268794980448121499502063607005225446365967023019237236575220642950682329357214452805859623764880288458325871902455296578425528095901176267368307414074039322370855168786715300327164346027270715097356090158273828064351113617408695216784335528479782955390990766396664072738263905729098421717944801586385144715882326392535985307337504808503506865730117632239544582166418566561241557227987500446957344373354569759175185393242724727859295627477787968846741068808712044313193598893518817600454775767566380562036817397366754435388427847179736958229294632333322132191148410038662854417359865291
c1 = 0x14f3b3a3f1f89237485cb2258ef59f17368381067fa0c9114598b8d80c4046eb69922823762e448e990aaa212276ac6c8f38ade0209c4130af32383dbf7d1d32a8320f6fa5fe41887ad34c3c37112ae23a5e81265e8f3c3beee361ccbad01d06349b4b2a31e48c0c3b6f8294b8b690454e1f54ad979b0cbc9eb96682dc1df5fe0d70cf9081146b7621a75e0ecd320b6d7ed5bb2ed2058a9177cece90e8235648c81dc5856d6ed59fbc626afa3aecb3a02ee8ff539b4d99980c70efdc861ecc8fc9b51d0a64c5683a896ab52ec9d4111e00c368162658caca59c12143395ed5cbfe7ca4124feb355c9cb3e7fd76d9353415528a0828f16afba4821b6d0d1170f9

p2 = int(gcd(n1, n2))
p1 = int(n1//p2)
p3 = int(n2//p2)
print(p1)
print(p2)
print(p3)
assert p1*p2 == n1
print(p1*p2)
print(p2*p3)

totient = int(int(p1-1)*int(p2-1))

e  = 65537
d = pow(e, -1, totient)
# print()
# print(d)
# x = pow(12345, e, n1)
# print(x)
# print()
# y = pow(x, d, n1)
# print(y)
# print()
m = int(c1)
decr = pow(m, d, n1)
print(decr)
print(ascii(decr))
print(hex(decr))
dec = codecs.decode(hex(decr),"hex")
print(dec)
### funkar, emanuel decodeade
## flag = 2020ctf{rsa_rsa_rsa_rsa_rsa_rsa_rsa_rsa_rsa_rsa_rsa_rsa}